public class Stack {
    private int maxSize;
    private int[] stackArray;
    private int top;

    // Constructor to initialize the stack
    public Stack(int size) {
        maxSize = size;
        stackArray = new int[maxSize];
        top = -1; // Initialize top index to -1 (empty stack)
    }

    // Function to push an element onto the stack
    public void push(int value) {
        if (top < maxSize - 1) {
            stackArray[++top] = value;
            System.out.println("Pushed: " + value);
        } else {
            System.out.println("Stack Overflow - Cannot push, stack is full");
        }
    }

    // Function to pop an element from the stack
    public int pop() {
        if (!isEmpty()) {
            int poppedValue = stackArray[top--];
            System.out.println("Popped: " + poppedValue);
            return poppedValue;
        } else {
            System.out.println("Stack Underflow - Cannot pop, stack is empty");
            return -1; // Return a default value for an empty stack (you can choose a different approach)
        }
    }

    // Function to check if the stack is empty
    public boolean isEmpty() {
        return top == -1;
    }

    public static void main(String[] args) {
        // Example usage
        Stack stack = new Stack(5);

        System.out.println("Is stack empty? " + stack.isEmpty());

        stack.push(10);
        stack.push(20);
        stack.push(30);

        System.out.println("Is stack empty? " + stack.isEmpty());

        stack.pop();
        stack.pop();
        stack.pop();
        stack.pop(); // Attempting to pop from an empty stack

        System.out.println("Is stack empty? " + stack.isEmpty());
    }
}
